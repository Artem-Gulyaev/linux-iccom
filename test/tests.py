from common import *

def iccom_data_exchange_to_transport_with_iccom_data_with_transport_data(dummy_transport_device, iccom_device):

        test_name = "Exchange data from iccom to transport and answer from tansport to iccom with default data"

        string_expected_xfer = "0x000x000x030xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0x9e0xd70x3d0xd3"
        string_expected_data = "I am Luis\n"

        # Create Channel 1
        create_iccom_channel(iccom_device, "1")

        # Create Transport RW Files
        create_transport_device_RW_files(dummy_transport_device)

        # Send a message from ICCOM to dummy transport via channel 1
        send_iccom_data_to_transport(iccom_device, "1", "Who are you\?")

        # Do (Default xfer) Data Exchange + ACK
        send_transport_data_to_iccom(dummy_transport_device, "0x000x000x010xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xb80xc80xb30x46")
        send_transport_data_to_iccom(dummy_transport_device, "0xd0")

        # Do ("I am Luis" xfer) Data Exchange + ACK
        send_transport_data_to_iccom(dummy_transport_device, "0x000x0e0x020x000x0a0x000x810x490x200x610x6d0x200x4c0x750x690x730x0a0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xe60x0a0x4f0x05")
        send_transport_data_to_iccom(dummy_transport_device, "0xd0")

        # Check result
        string_received_xfer = check_iccom_to_transport_next_xfer_data(dummy_transport_device)
        string_received_data = receive_transport_data_to_iccom(iccom_device, "1")

        if(string_received_xfer == string_expected_xfer and string_received_data == string_expected_data):
                print("TEST PASSED: " + test_name)
        else:
                print("TEST FAILED: " + test_name)

def iccom_data_exchange_to_transport_with_iccom_data_without_transport_data(dummy_transport_device, iccom_device):

        test_name = "Exchange data from iccom to transport and vice versa with valid data"
        string_expected = "0x000x000x030xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0x9e0xd70x3d0xd3"

        # Create Channel 1
        create_iccom_channel(iccom_device, "1")

        # Create Transport RW Files
        create_transport_device_RW_files(dummy_transport_device)

        # Send a message from ICCOM to dummy transport via channel 1
        send_iccom_data_to_transport(iccom_device, "1", "Who are you\?")

        # Do (Default xfer) Data Exchange + ACK
        send_transport_data_to_iccom(dummy_transport_device, "0x000x000x010xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xb80xc80xb30x46")
        send_transport_data_to_iccom(dummy_transport_device, "0xd0")

        # Do (Default xfer) Data Exchange + ACK
        send_transport_data_to_iccom(dummy_transport_device, "0x000x000x020xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0x0d0xd80xfa0x99")
        send_transport_data_to_iccom(dummy_transport_device, "0xd0")

        # Check result
        string_received = check_iccom_to_transport_next_xfer_data(dummy_transport_device)

        if(string_received == string_expected):
                print("TEST PASSED: " + test_name)
        else:
                print("TEST FAILED: " + test_name)

def iccom_data_exchange_to_transport_with_iccom_data_with_transport_data_wrong_payload_size(dummy_transport_device, iccom_device):

        test_name = "Exchange data from iccom to transport and answer from tansport to iccom with default data with wrong sequence"

        string_expected = "0xe1"

        # Create Channel 1
        create_iccom_channel(iccom_device, "1")

        # Create Transport RW Files
        create_transport_device_RW_files(dummy_transport_device)

        # Send a message from ICCOM to dummy transport via channel 1
        send_iccom_data_to_transport(iccom_device, "1", "Who are you\?")

        # Do (Default xfer) Data Exchange + ACK
        send_transport_data_to_iccom(dummy_transport_device, "0x000x000x010xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xb80xc80xb30x46")
        send_transport_data_to_iccom(dummy_transport_device, "0xd0")

        # Do (Default xfer) Data Exchange without ACK
        send_transport_data_to_iccom(dummy_transport_device, "0x000x020x020xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0x5a0xc30x2b0x94")

        # Check result
        string_received = check_iccom_to_transport_next_xfer_data(dummy_transport_device)

        if(string_received == string_expected):
                print("TEST PASSED: " + test_name)
        else:
                print("TEST FAILED: " + test_name)

def iccom_data_exchange_to_transport_with_iccom_data_with_transport_nack(dummy_transport_device, iccom_device):

        test_name = "Exchange data from iccom to transport and answer from tansport to iccom with nack"

        string_expected = "0x000x000x010xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xb80xc80xb30x46"

        # Create Channel 1
        create_iccom_channel(iccom_device, "1")

        # Create Transport RW Files
        create_transport_device_RW_files(dummy_transport_device)

        # Send a message from ICCOM to dummy transport via channel 1
        send_iccom_data_to_transport(iccom_device, "1", "Who are you\?")

        # Do (Default xfer) Data Exchange + NACK
        send_transport_data_to_iccom(dummy_transport_device, "0x000x000x010xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xff0xb80xc80xb30x46")
        send_transport_data_to_iccom(dummy_transport_device, "0xe1")

        # Check result
        string_received = check_iccom_to_transport_next_xfer_data(dummy_transport_device)

        if(string_received == string_expected):
                print("TEST PASSED: " + test_name)
        else:
                print("TEST FAILED: " + test_name)